Authentication		
FALSE	------->>>>	Don't use Basic Auth. Use standard authentication instead (e.g. JWT, OAuth).
FALSE	------->>>>	Don't reinvent the wheel in Authentication, token generation, password storage. Use the standards.
FALSE	------->>>>	Use Max Retry and jail features in Login.
JWT (JSON Web Token)		
FALSE	------->>>>	Use a random complicated key (JWT Secret) to make brute forcing the token very hard.
FALSE	------->>>>	Don't extract the algorithm from the header. Force the algorithm in the backend (HS256 or RS256).
FALSE	------->>>>	Make token expiration (TTL, RTTL) as short as possible.
FALSE	------->>>>	Don't store sensitive data in the JWT payload, it can be decoded easily.
OAuth		
FALSE	------->>>>	Always validate redirect_uri server-side to allow only whitelisted URLs.
FALSE	------->>>>	Always try to exchange for code and not tokens (don't allow response_type=token).
FALSE	------->>>>	Use state parameter with a random hash to prevent CSRF on the OAuth authentication process.
FALSE	------->>>>	Define the default scope, and validate scope parameters for each application.
Access		
FALSE	------->>>>	Limit requests (Throttling) to avoid DDoS / brute-force attacks.
FALSE	------->>>>	Use HTTPS on server side to avoid MITM (Man in the Middle Attack).
FALSE	------->>>>	Use HSTS header with SSL to avoid SSL Strip attack.
Input		
FALSE	------->>>>	Use the proper HTTP method according to the operation: GET (read), POST (create), PUT/PATCH (replace/update), and DELETE (to delete a record), and respond with 405 Method Not Allowed if the requested method isn't appropriate for the requested resource.
FALSE	------->>>>	Validate content-type on request Accept header (Content Negotiation) to allow only your supported format (e.g. application/xml, application/json, etc.) and respond with 406 Not Acceptable response if not matched.
FALSE	------->>>>	Validate content-type of posted data as you accept (e.g. application/x-www-form-urlencoded, multipart/form-data, application/json, etc.).
FALSE	------->>>>	Validate user input to avoid common vulnerabilities (e.g. XSS, SQL-Injection, Remote Code Execution, etc.).
FALSE	------->>>>	Don't use any sensitive data (credentials, Passwords, security tokens, or API keys) in the URL, but use standard Authorization header.
FALSE	------->>>>	Use an API Gateway service to enable caching, Rate Limit policies (e.g. Quota, Spike Arrest, or Concurrent Rate Limit) and deploy APIs resources dynamically.
Processing		
FALSE	------->>>>	Check if all the endpoints are protected behind authentication to avoid broken authentication process.
FALSE	------->>>>	User own resource ID should be avoided. Use /me/orders instead of /user/654321/orders.
FALSE	------->>>>	Don't auto-increment IDs. Use UUID instead.
FALSE	------->>>>	If you are parsing XML files, make sure entity parsing is not enabled to avoid XXE (XML external entity attack).
FALSE	------->>>>	If you are parsing XML files, make sure entity expansion is not enabled to avoid Billion Laughs/XML bomb via exponential entity expansion attack.
FALSE	------->>>>	Use a CDN for file uploads.
FALSE	------->>>>	If you are dealing with huge amount of data, use Workers and Queues to process as much as possible in background and return response fast to avoid HTTP Blocking.
FALSE	------->>>>	Do not forget to turn the DEBUG mode OFF.
Output		
FALSE	------->>>>	Send X-Content-Type-Options: nosniff header.
FALSE	------->>>>	Send X-Frame-Options: deny header.
FALSE	------->>>>	Send Content-Security-Policy: default-src 'none' header.
FALSE	------->>>>	Remove fingerprinting headers - X-Powered-By, Server, X-AspNet-Version, etc.
FALSE	------->>>>	Force content-type for your response. If you return application/json, then your content-type response is application/json.
FALSE	------->>>>	Don't return sensitive data like credentials, Passwords, or security tokens.
FALSE	------->>>>	Return the proper status code according to the operation completed. (e.g. 200 OK, 400 Bad Request, 401 Unauthorized, 405 Method Not Allowed, etc.).
CI & CD		
FALSE	------->>>>	Audit your design and implementation with unit/integration tests coverage.
FALSE	------->>>>	Use a code review process and disregard self-approval.
FALSE	------->>>>	Ensure that all components of your services are statically scanned by AV software before pushing to production, including vendor libraries and other dependencies.
FALSE	------->>>>	Design a rollback solution for deployments.
https://github.com/shieldfy/API-Security-Checklist		
